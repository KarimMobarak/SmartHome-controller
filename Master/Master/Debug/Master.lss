
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000106  00800060  0000068e  00000722  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800166  00800166  00000828  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e6c  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7f  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d8e  00000000  00000000  00003617  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  000043a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d9  00000000  00000000  000046c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab9  00000000  00000000  00004e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005952  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 17 02 	call	0x42e	; 0x42e <main>
  8a:	0c 94 45 03 	jmp	0x68a	; 0x68a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BLE_Init>:


/*Initialize bluetooth peripheral*/
void BLE_Init(USART_config* usart_config){
	
	USART_Init(usart_config);
  92:	0e 94 a2 02 	call	0x544	; 0x544 <USART_Init>
  96:	08 95       	ret

00000098 <pin_config>:

#include "DIO.h"


void pin_config (Uint8 port, Uint8 pin, Uint8 direction){
	switch (direction)
  98:	44 23       	and	r20, r20
  9a:	d9 f1       	breq	.+118    	; 0x112 <pin_config+0x7a>
  9c:	41 30       	cpi	r20, 0x01	; 1
  9e:	09 f0       	breq	.+2      	; 0xa2 <pin_config+0xa>
  a0:	6b c0       	rjmp	.+214    	; 0x178 <pin_config+0xe0>
	{
		case DIO_INPUT:
		switch (port)
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	91 f0       	breq	.+36     	; 0xca <pin_config+0x32>
  a6:	28 f0       	brcs	.+10     	; 0xb2 <pin_config+0x1a>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	d9 f0       	breq	.+54     	; 0xe2 <pin_config+0x4a>
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	29 f1       	breq	.+74     	; 0xfa <pin_config+0x62>
  b0:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA,pin);
  b2:	2a b3       	in	r18, 0x1a	; 26
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <pin_config+0x26>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <pin_config+0x22>
  c2:	80 95       	com	r24
  c4:	82 23       	and	r24, r18
  c6:	8a bb       	out	0x1a, r24	; 26
			break;
  c8:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB,pin);
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <pin_config+0x3e>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <pin_config+0x3a>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	87 bb       	out	0x17, r24	; 23
			break;
  e0:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC,pin);
  e2:	24 b3       	in	r18, 0x14	; 20
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <pin_config+0x56>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <pin_config+0x52>
  f2:	80 95       	com	r24
  f4:	82 23       	and	r24, r18
  f6:	84 bb       	out	0x14, r24	; 20
			break;
  f8:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD,pin);
  fa:	21 b3       	in	r18, 0x11	; 17
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pin_config+0x6e>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <pin_config+0x6a>
 10a:	80 95       	com	r24
 10c:	82 23       	and	r24, r18
 10e:	81 bb       	out	0x11, r24	; 17
			break;
 110:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	89 f0       	breq	.+34     	; 0x138 <pin_config+0xa0>
 116:	28 f0       	brcs	.+10     	; 0x122 <pin_config+0x8a>
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	c9 f0       	breq	.+50     	; 0x14e <pin_config+0xb6>
 11c:	83 30       	cpi	r24, 0x03	; 3
 11e:	11 f1       	breq	.+68     	; 0x164 <pin_config+0xcc>
 120:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA,pin);
 122:	2a b3       	in	r18, 0x1a	; 26
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <pin_config+0x96>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <pin_config+0x92>
 132:	82 2b       	or	r24, r18
 134:	8a bb       	out	0x1a, r24	; 26
			break;
 136:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB,pin);
 138:	27 b3       	in	r18, 0x17	; 23
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <pin_config+0xac>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <pin_config+0xa8>
 148:	82 2b       	or	r24, r18
 14a:	87 bb       	out	0x17, r24	; 23
			break;
 14c:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC,pin);
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <pin_config+0xc2>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <pin_config+0xbe>
 15e:	82 2b       	or	r24, r18
 160:	84 bb       	out	0x14, r24	; 20
			break;
 162:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD,pin);
 164:	21 b3       	in	r18, 0x11	; 17
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <pin_config+0xd8>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <pin_config+0xd4>
 174:	82 2b       	or	r24, r18
 176:	81 bb       	out	0x11, r24	; 17
 178:	08 95       	ret

0000017a <pin_value>:
	}
}


void pin_value(Uint8 port, Uint8 pin, state value){
	switch (value)
 17a:	44 23       	and	r20, r20
 17c:	19 f0       	breq	.+6      	; 0x184 <pin_value+0xa>
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	c9 f1       	breq	.+114    	; 0x1f4 <pin_value+0x7a>
 182:	08 95       	ret
	{
		case LOW:
		switch(port)
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	91 f0       	breq	.+36     	; 0x1ac <pin_value+0x32>
 188:	28 f0       	brcs	.+10     	; 0x194 <pin_value+0x1a>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	d9 f0       	breq	.+54     	; 0x1c4 <pin_value+0x4a>
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	29 f1       	breq	.+74     	; 0x1dc <pin_value+0x62>
 192:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 194:	2b b3       	in	r18, 0x1b	; 27
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <pin_value+0x26>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <pin_value+0x22>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
			break;
 1aa:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 1ac:	28 b3       	in	r18, 0x18	; 24
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <pin_value+0x3e>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <pin_value+0x3a>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	88 bb       	out	0x18, r24	; 24
			break;
 1c2:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1c4:	25 b3       	in	r18, 0x15	; 21
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <pin_value+0x56>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <pin_value+0x52>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	85 bb       	out	0x15, r24	; 21
			break;
 1da:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1dc:	22 b3       	in	r18, 0x12	; 18
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <pin_value+0x6e>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <pin_value+0x6a>
 1ec:	80 95       	com	r24
 1ee:	82 23       	and	r24, r18
 1f0:	82 bb       	out	0x12, r24	; 18
			break;
 1f2:	08 95       	ret
		}
		break;
		case HIGH:
		switch(port)
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	89 f0       	breq	.+34     	; 0x21a <pin_value+0xa0>
 1f8:	28 f0       	brcs	.+10     	; 0x204 <pin_value+0x8a>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	c9 f0       	breq	.+50     	; 0x230 <pin_value+0xb6>
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	11 f1       	breq	.+68     	; 0x246 <pin_value+0xcc>
 202:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 204:	2b b3       	in	r18, 0x1b	; 27
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <pin_value+0x96>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <pin_value+0x92>
 214:	82 2b       	or	r24, r18
 216:	8b bb       	out	0x1b, r24	; 27
			break;
 218:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 21a:	28 b3       	in	r18, 0x18	; 24
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <pin_value+0xac>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <pin_value+0xa8>
 22a:	82 2b       	or	r24, r18
 22c:	88 bb       	out	0x18, r24	; 24
			break;
 22e:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 230:	25 b3       	in	r18, 0x15	; 21
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <pin_value+0xc2>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <pin_value+0xbe>
 240:	82 2b       	or	r24, r18
 242:	85 bb       	out	0x15, r24	; 21
			break;
 244:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 246:	22 b3       	in	r18, 0x12	; 18
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <pin_value+0xd8>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <pin_value+0xd4>
 256:	82 2b       	or	r24, r18
 258:	82 bb       	out	0x12, r24	; 18
 25a:	08 95       	ret

0000025c <readEEPROM>:

Uint8 readEEPROM(Address address){
	
	/*check whether there is already
	 writing operation in progress*/
	while(GET_BIT(EECR,EEWE));
 25c:	e1 99       	sbic	0x1c, 1	; 28
 25e:	fe cf       	rjmp	.-4      	; 0x25c <readEEPROM>
	
	EEAR = address;
 260:	90 bd       	out	0x20, r25	; 32
 262:	8f bb       	out	0x1f, r24	; 31
	
	//Read enable
	SET_BIT(EECR,EERE);
 264:	8c b3       	in	r24, 0x1c	; 28
 266:	81 60       	ori	r24, 0x01	; 1
 268:	8c bb       	out	0x1c, r24	; 28
	
	return EEDR;
 26a:	8d b3       	in	r24, 0x1d	; 29
	
}
 26c:	08 95       	ret

0000026e <writeEEPROM>:

void writeEEPROM(Uint8 data, Address address){
	
	/*check whether there is already
	 writing operation in progress*/
	while(GET_BIT(EECR,EEWE));
 26e:	e1 99       	sbic	0x1c, 1	; 28
 270:	fe cf       	rjmp	.-4      	; 0x26e <writeEEPROM>
	
	EEDR = data;
 272:	8d bb       	out	0x1d, r24	; 29
	EEAR = address;
 274:	70 bd       	out	0x20, r23	; 32
 276:	6f bb       	out	0x1f, r22	; 31
	
	SET_BIT(EECR,EEMWE);
 278:	8c b3       	in	r24, 0x1c	; 28
 27a:	84 60       	ori	r24, 0x04	; 4
 27c:	8c bb       	out	0x1c, r24	; 28
	SET_BIT(EECR, EEWE);
 27e:	8c b3       	in	r24, 0x1c	; 28
 280:	82 60       	ori	r24, 0x02	; 2
 282:	8c bb       	out	0x1c, r24	; 28
 284:	08 95       	ret

00000286 <LCD_WRITE_CMD>:
void LCD_WRITE_NBR(Uint32 numbr)
{
	Uint8 num[10];
	ltoa(numbr, (Uint8*)num, 10);
	LCD_WRITE_STR(num);
}
 286:	cf 93       	push	r28
 288:	c8 2f       	mov	r28, r24
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	62 e0       	ldi	r22, 0x02	; 2
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 2a8:	8b b3       	in	r24, 0x1b	; 27
 2aa:	9c 2f       	mov	r25, r28
 2ac:	90 7f       	andi	r25, 0xF0	; 240
 2ae:	8f 70       	andi	r24, 0x0F	; 15
 2b0:	89 2b       	or	r24, r25
 2b2:	8b bb       	out	0x1b, r24	; 27
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 2be:	8f e9       	ldi	r24, 0x9F	; 159
 2c0:	9f e0       	ldi	r25, 0x0F	; 15
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_WRITE_CMD+0x3c>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_WRITE_CMD+0x42>
 2c8:	00 00       	nop
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	63 e0       	ldi	r22, 0x03	; 3
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 2d4:	20 e1       	ldi	r18, 0x10	; 16
 2d6:	c2 9f       	mul	r28, r18
 2d8:	c0 01       	movw	r24, r0
 2da:	11 24       	eor	r1, r1
 2dc:	9b b3       	in	r25, 0x1b	; 27
 2de:	9f 70       	andi	r25, 0x0F	; 15
 2e0:	89 2b       	or	r24, r25
 2e2:	8b bb       	out	0x1b, r24	; 27
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	63 e0       	ldi	r22, 0x03	; 3
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 2ee:	8f e9       	ldi	r24, 0x9F	; 159
 2f0:	9f e0       	ldi	r25, 0x0F	; 15
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCD_WRITE_CMD+0x6c>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCD_WRITE_CMD+0x72>
 2f8:	00 00       	nop
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 304:	8f e3       	ldi	r24, 0x3F	; 63
 306:	9f e1       	ldi	r25, 0x1F	; 31
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_WRITE_CMD+0x82>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_WRITE_CMD+0x88>
 30e:	00 00       	nop
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <LCD_Init>:
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	62 e0       	ldi	r22, 0x02	; 2
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	63 e0       	ldi	r22, 0x03	; 3
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	64 e0       	ldi	r22, 0x04	; 4
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	65 e0       	ldi	r22, 0x05	; 5
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	66 e0       	ldi	r22, 0x06	; 6
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	67 e0       	ldi	r22, 0x07	; 7
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	81 ee       	ldi	r24, 0xE1	; 225
 35e:	94 e0       	ldi	r25, 0x04	; 4
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <LCD_Init+0x4c>
 368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_Init+0x56>
 36a:	00 00       	nop
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WRITE_CMD>
 372:	83 e3       	ldi	r24, 0x33	; 51
 374:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WRITE_CMD>
 378:	82 e3       	ldi	r24, 0x32	; 50
 37a:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WRITE_CMD>
 37e:	88 e2       	ldi	r24, 0x28	; 40
 380:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WRITE_CMD>
 384:	8c e0       	ldi	r24, 0x0C	; 12
 386:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WRITE_CMD>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WRITE_CMD>
 390:	86 e0       	ldi	r24, 0x06	; 6
 392:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WRITE_CMD>
 396:	08 95       	ret

00000398 <LCD_WRITE_DTA>:
 398:	cf 93       	push	r28
 39a:	c8 2f       	mov	r28, r24
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	62 e0       	ldi	r22, 0x02	; 2
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	63 e0       	ldi	r22, 0x03	; 3
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 3ba:	8b b3       	in	r24, 0x1b	; 27
 3bc:	9c 2f       	mov	r25, r28
 3be:	90 7f       	andi	r25, 0xF0	; 240
 3c0:	8f 70       	andi	r24, 0x0F	; 15
 3c2:	89 2b       	or	r24, r25
 3c4:	8b bb       	out	0x1b, r24	; 27
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	63 e0       	ldi	r22, 0x03	; 3
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 3d0:	8f e9       	ldi	r24, 0x9F	; 159
 3d2:	9f e0       	ldi	r25, 0x0F	; 15
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <LCD_WRITE_DTA+0x3c>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <LCD_WRITE_DTA+0x42>
 3da:	00 00       	nop
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	63 e0       	ldi	r22, 0x03	; 3
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 3e6:	20 e1       	ldi	r18, 0x10	; 16
 3e8:	c2 9f       	mul	r28, r18
 3ea:	c0 01       	movw	r24, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	9b b3       	in	r25, 0x1b	; 27
 3f0:	9f 70       	andi	r25, 0x0F	; 15
 3f2:	89 2b       	or	r24, r25
 3f4:	8b bb       	out	0x1b, r24	; 27
 3f6:	41 e0       	ldi	r20, 0x01	; 1
 3f8:	63 e0       	ldi	r22, 0x03	; 3
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 400:	8f e9       	ldi	r24, 0x9F	; 159
 402:	9f e0       	ldi	r25, 0x0F	; 15
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	63 e0       	ldi	r22, 0x03	; 3
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 416:	8f e3       	ldi	r24, 0x3F	; 63
 418:	9f e1       	ldi	r25, 0x1F	; 31
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <LCD_CLEAR>:
void LCD_CLEAR(void)/*Clear data display on screen*/
{
	LCD_WRITE_CMD(0x01);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WRITE_CMD>
 42c:	08 95       	ret

0000042e <main>:


int main(void)
{
	
	BLE_Init(&usart_config);
 42e:	80 e6       	ldi	r24, 0x60	; 96
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 49 00 	call	0x92	; 0x92 <BLE_Init>
	
	LCD_Init();
 436:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Init>
	
	SPI_init(master,disable);
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <SPI_init>
	
	/*Inform the user of the control keys*/
	USART_Tx_msg("\t \t WELCOME TO SMART HOME \r\n \r\n \t To control the light send the corresponding character: \r\n #'K' to turn on the kitchen light \r\n #'L' to turn on the living room \r\n #'k' to turn off the kitchen light \r\n #'l' to turn off the living room light \r\n INPUT:");
 442:	8a e6       	ldi	r24, 0x6A	; 106
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 36 03 	call	0x66c	; 0x66c <USART_Tx_msg>
 44a:	ff cf       	rjmp	.-2      	; 0x44a <main+0x1c>

0000044c <__vector_13>:
	while(1){
		
	}
}

ISR(USART_RXC_vect){
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
		
		/*Wait for the bluetooth to receive any commands*/
		receivedByte = UDR;
 46e:	8c b1       	in	r24, 0x0c	; 12
 470:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
		
		/*Send the command to the slave*/
		SPI_send_byte(receivedByte);
 474:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
 478:	0e 94 9e 02 	call	0x53c	; 0x53c <SPI_send_byte>
				LCD_WRITE_STR("Living room: ON");
				USART_Tx_msg("Living room: ON");
				break;
		}*/
		
		writeEEPROM(receivedByte,0X01);
 47c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	0e 94 37 01 	call	0x26e	; 0x26e <writeEEPROM>
		LCD_CLEAR();
 488:	0e 94 13 02 	call	0x426	; 0x426 <LCD_CLEAR>
		LCD_WRITE_DTA(readEEPROM(0X01));
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 2e 01 	call	0x25c	; 0x25c <readEEPROM>
 494:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_WRITE_DTA>

}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	bf 91       	pop	r27
 49e:	af 91       	pop	r26
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	7f 91       	pop	r23
 4a6:	6f 91       	pop	r22
 4a8:	5f 91       	pop	r21
 4aa:	4f 91       	pop	r20
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <SPI_init>:

void inline master_pin_config(){
	pin_config(SPI_PORT,MOSI_PIN, DIO_OUTPUT);
	pin_config(SPI_PORT,MISO_PIN,DIO_INPUT);
	pin_config(SPI_PORT,SS_PIN,DIO_OUTPUT);
	pin_config(SPI_PORT,SCK_PIN,DIO_OUTPUT);
 4ba:	cf 93       	push	r28
 4bc:	c6 2f       	mov	r28, r22
 4be:	88 23       	and	r24, r24
 4c0:	f1 f0       	breq	.+60     	; 0x4fe <SPI_init+0x44>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	81 f5       	brne	.+96     	; 0x526 <SPI_init+0x6c>
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	65 e0       	ldi	r22, 0x05	; 5
 4ca:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	66 e0       	ldi	r22, 0x06	; 6
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	64 e0       	ldi	r22, 0x04	; 4
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 4e2:	40 e0       	ldi	r20, 0x00	; 0
 4e4:	67 e0       	ldi	r22, 0x07	; 7
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 4ec:	8d b1       	in	r24, 0x0d	; 13
 4ee:	80 61       	ori	r24, 0x10	; 16
 4f0:	8d b9       	out	0x0d, r24	; 13
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	64 e0       	ldi	r22, 0x04	; 4
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 bd 00 	call	0x17a	; 0x17a <pin_value>
 4fc:	14 c0       	rjmp	.+40     	; 0x526 <SPI_init+0x6c>
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	65 e0       	ldi	r22, 0x05	; 5
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	66 e0       	ldi	r22, 0x06	; 6
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 512:	41 e0       	ldi	r20, 0x01	; 1
 514:	64 e0       	ldi	r22, 0x04	; 4
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	67 e0       	ldi	r22, 0x07	; 7
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	0e 94 4c 00 	call	0x98	; 0x98 <pin_config>
 526:	c1 30       	cpi	r28, 0x01	; 1
 528:	21 f4       	brne	.+8      	; 0x532 <SPI_init+0x78>
 52a:	78 94       	sei
 52c:	8d b1       	in	r24, 0x0d	; 13
 52e:	80 68       	ori	r24, 0x80	; 128
 530:	8d b9       	out	0x0d, r24	; 13
 532:	8d b1       	in	r24, 0x0d	; 13
 534:	80 64       	ori	r24, 0x40	; 64
 536:	8d b9       	out	0x0d, r24	; 13
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <SPI_send_byte>:
	pin_config(SPI_PORT,SS_PIN,DIO_INPUT);
	pin_config(SPI_PORT,SCK_PIN,DIO_INPUT);
}

void SPI_send_byte(Uint8 msg){
	SPDR = msg;
 53c:	8f b9       	out	0x0f, r24	; 15
	while(GET_BIT(SPSR,SPIF) != 1);
 53e:	77 9b       	sbis	0x0e, 7	; 14
 540:	fe cf       	rjmp	.-4      	; 0x53e <SPI_send_byte+0x2>
		
}
 542:	08 95       	ret

00000544 <USART_Init>:

#define BAUD_RATE 9600
#define UBRR_VALUE  (fosc/(16UL*BAUD_RATE))-1

void USART_Init( USART_config* usart_config )
{
 544:	fc 01       	movw	r30, r24
	Uint16 UBRR = UBRR_VALUE;
	
	/* Set baud rate */
	UBRRH = (unsigned char)(UBRR>>8);
 546:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) UBRR;
 548:	87 e6       	ldi	r24, 0x67	; 103
 54a:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	
	switch (usart_config -> operatingMode)
 54c:	80 81       	ld	r24, Z
 54e:	81 30       	cpi	r24, 0x01	; 1
 550:	21 f0       	breq	.+8      	; 0x55a <USART_Init+0x16>
 552:	30 f0       	brcs	.+12     	; 0x560 <USART_Init+0x1c>
 554:	82 30       	cpi	r24, 0x02	; 2
 556:	41 f0       	breq	.+16     	; 0x568 <USART_Init+0x24>
 558:	0a c0       	rjmp	.+20     	; 0x56e <USART_Init+0x2a>
	{
		case asynchronousDoubleSpeedMode :
		SET_BIT(UCSRA,U2X);
 55a:	8b b1       	in	r24, 0x0b	; 11
 55c:	82 60       	ori	r24, 0x02	; 2
 55e:	8b b9       	out	0x0b, r24	; 11
		case asynchronousNormalMode:
		CLR_BIT(UCSRC,UMSEL);
 560:	80 b5       	in	r24, 0x20	; 32
 562:	8f 7b       	andi	r24, 0xBF	; 191
 564:	80 bd       	out	0x20, r24	; 32
		break;
 566:	03 c0       	rjmp	.+6      	; 0x56e <USART_Init+0x2a>
		case synchronousMode:
		SET_BIT(UCSRC,UMSEL);
 568:	80 b5       	in	r24, 0x20	; 32
 56a:	80 64       	ori	r24, 0x40	; 64
 56c:	80 bd       	out	0x20, r24	; 32
		break;
	}
	
		UCSRB = (1<<RXEN)|(1<<TXEN);
 56e:	88 e1       	ldi	r24, 0x18	; 24
 570:	8a b9       	out	0x0a, r24	; 10

	
	switch (usart_config -> interrupt1Status)
 572:	81 81       	ldd	r24, Z+1	; 0x01
 574:	82 30       	cpi	r24, 0x02	; 2
 576:	49 f0       	breq	.+18     	; 0x58a <USART_Init+0x46>
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	61 f0       	breq	.+24     	; 0x594 <USART_Init+0x50>
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	71 f4       	brne	.+28     	; 0x59c <USART_Init+0x58>
	{
		case receivedInterrupt:
		SET_BIT(UCSRB,RXCIE);
 580:	8a b1       	in	r24, 0x0a	; 10
 582:	80 68       	ori	r24, 0x80	; 128
 584:	8a b9       	out	0x0a, r24	; 10
		sei();
 586:	78 94       	sei
		break;
 588:	09 c0       	rjmp	.+18     	; 0x59c <USART_Init+0x58>
		case transmitttedInterrupt:
		sei();
 58a:	78 94       	sei
		SET_BIT(UCSRB,TXCIE);
 58c:	8a b1       	in	r24, 0x0a	; 10
 58e:	80 64       	ori	r24, 0x40	; 64
 590:	8a b9       	out	0x0a, r24	; 10
		break;
 592:	04 c0       	rjmp	.+8      	; 0x59c <USART_Init+0x58>
		case dataRegisterReadyInterrupt:
		sei();
 594:	78 94       	sei
		SET_BIT(UCSRB,UDRIE);
 596:	8a b1       	in	r24, 0x0a	; 10
 598:	80 62       	ori	r24, 0x20	; 32
 59a:	8a b9       	out	0x0a, r24	; 10
		break;
	}
	
	switch (usart_config -> interrupt2Status)
 59c:	82 81       	ldd	r24, Z+2	; 0x02
 59e:	82 30       	cpi	r24, 0x02	; 2
 5a0:	49 f0       	breq	.+18     	; 0x5b4 <USART_Init+0x70>
 5a2:	83 30       	cpi	r24, 0x03	; 3
 5a4:	61 f0       	breq	.+24     	; 0x5be <USART_Init+0x7a>
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	71 f4       	brne	.+28     	; 0x5c6 <USART_Init+0x82>
	{
		case receivedInterrupt:
		SET_BIT(UCSRB,RXCIE);
 5aa:	8a b1       	in	r24, 0x0a	; 10
 5ac:	80 68       	ori	r24, 0x80	; 128
 5ae:	8a b9       	out	0x0a, r24	; 10
		sei();
 5b0:	78 94       	sei
		break;
 5b2:	09 c0       	rjmp	.+18     	; 0x5c6 <USART_Init+0x82>
		case transmitttedInterrupt:
		SET_BIT(UCSRB,TXCIE);
 5b4:	8a b1       	in	r24, 0x0a	; 10
 5b6:	80 64       	ori	r24, 0x40	; 64
 5b8:	8a b9       	out	0x0a, r24	; 10
		sei();
 5ba:	78 94       	sei
		break;
 5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <USART_Init+0x82>
		case dataRegisterReadyInterrupt:
		SET_BIT(UCSRB,UDRIE);
 5be:	8a b1       	in	r24, 0x0a	; 10
 5c0:	80 62       	ori	r24, 0x20	; 32
 5c2:	8a b9       	out	0x0a, r24	; 10
		sei();
 5c4:	78 94       	sei
		break;
	}
	
	switch (usart_config -> interrupt3Status)
 5c6:	83 81       	ldd	r24, Z+3	; 0x03
 5c8:	82 30       	cpi	r24, 0x02	; 2
 5ca:	49 f0       	breq	.+18     	; 0x5de <USART_Init+0x9a>
 5cc:	83 30       	cpi	r24, 0x03	; 3
 5ce:	61 f0       	breq	.+24     	; 0x5e8 <USART_Init+0xa4>
 5d0:	81 30       	cpi	r24, 0x01	; 1
 5d2:	71 f4       	brne	.+28     	; 0x5f0 <USART_Init+0xac>
	{
		case receivedInterrupt:
		sei();
 5d4:	78 94       	sei
		SET_BIT(UCSRB,RXCIE);
 5d6:	8a b1       	in	r24, 0x0a	; 10
 5d8:	80 68       	ori	r24, 0x80	; 128
 5da:	8a b9       	out	0x0a, r24	; 10
		break;
 5dc:	09 c0       	rjmp	.+18     	; 0x5f0 <USART_Init+0xac>
		case transmitttedInterrupt:
		sei();
 5de:	78 94       	sei
		SET_BIT(UCSRB,TXCIE);
 5e0:	8a b1       	in	r24, 0x0a	; 10
 5e2:	80 64       	ori	r24, 0x40	; 64
 5e4:	8a b9       	out	0x0a, r24	; 10
		break;
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <USART_Init+0xac>
		case dataRegisterReadyInterrupt:
		sei();
 5e8:	78 94       	sei
		SET_BIT(UCSRB,UDRIE);
 5ea:	8a b1       	in	r24, 0x0a	; 10
 5ec:	80 62       	ori	r24, 0x20	; 32
 5ee:	8a b9       	out	0x0a, r24	; 10
		break;
	}
	
	switch (usart_config->dataBitNum)
 5f0:	85 81       	ldd	r24, Z+5	; 0x05
 5f2:	82 30       	cpi	r24, 0x02	; 2
 5f4:	69 f0       	breq	.+26     	; 0x610 <USART_Init+0xcc>
 5f6:	18 f4       	brcc	.+6      	; 0x5fe <USART_Init+0xba>
 5f8:	81 30       	cpi	r24, 0x01	; 1
 5fa:	31 f0       	breq	.+12     	; 0x608 <USART_Init+0xc4>
 5fc:	17 c0       	rjmp	.+46     	; 0x62c <USART_Init+0xe8>
 5fe:	83 30       	cpi	r24, 0x03	; 3
 600:	59 f0       	breq	.+22     	; 0x618 <USART_Init+0xd4>
 602:	84 30       	cpi	r24, 0x04	; 4
 604:	69 f0       	breq	.+26     	; 0x620 <USART_Init+0xdc>
 606:	12 c0       	rjmp	.+36     	; 0x62c <USART_Init+0xe8>
	{
		case fiveBits:
		break;
		case sixBits:
		UCSRC |= (1<<URSEL) | (1<<UCSZ0);
 608:	80 b5       	in	r24, 0x20	; 32
 60a:	82 68       	ori	r24, 0x82	; 130
 60c:	80 bd       	out	0x20, r24	; 32
		break;
 60e:	0e c0       	rjmp	.+28     	; 0x62c <USART_Init+0xe8>
		case sevenBits:
		UCSRC |= (1<<URSEL) | (1<<UCSZ1);
 610:	80 b5       	in	r24, 0x20	; 32
 612:	84 68       	ori	r24, 0x84	; 132
 614:	80 bd       	out	0x20, r24	; 32
		break;
 616:	0a c0       	rjmp	.+20     	; 0x62c <USART_Init+0xe8>
		case eightBits:
		UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
 618:	80 b5       	in	r24, 0x20	; 32
 61a:	86 68       	ori	r24, 0x86	; 134
 61c:	80 bd       	out	0x20, r24	; 32
		break;
 61e:	06 c0       	rjmp	.+12     	; 0x62c <USART_Init+0xe8>
		case nineBits:
		UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
 620:	80 b5       	in	r24, 0x20	; 32
 622:	86 68       	ori	r24, 0x86	; 134
 624:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRB,UCSZ2);
 626:	8a b1       	in	r24, 0x0a	; 10
 628:	84 60       	ori	r24, 0x04	; 4
 62a:	8a b9       	out	0x0a, r24	; 10
		break;
	}
	
	if(usart_config -> stopBitNum == twoBits){
 62c:	84 81       	ldd	r24, Z+4	; 0x04
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	19 f4       	brne	.+6      	; 0x638 <USART_Init+0xf4>
		UCSRC |= (1<<URSEL) | (1<<USBS);
 632:	80 b5       	in	r24, 0x20	; 32
 634:	88 68       	ori	r24, 0x88	; 136
 636:	80 bd       	out	0x20, r24	; 32
	}
	
	switch(usart_config -> parityMode){
 638:	87 81       	ldd	r24, Z+7	; 0x07
 63a:	82 30       	cpi	r24, 0x02	; 2
 63c:	19 f0       	breq	.+6      	; 0x644 <USART_Init+0x100>
 63e:	83 30       	cpi	r24, 0x03	; 3
 640:	29 f0       	breq	.+10     	; 0x64c <USART_Init+0x108>
 642:	07 c0       	rjmp	.+14     	; 0x652 <USART_Init+0x10e>
		case disabledParity:
		break;
		case evenParityEnabled:
		UCSRC |= (1<<URSEL) | (1<<UPM1);
 644:	80 b5       	in	r24, 0x20	; 32
 646:	80 6a       	ori	r24, 0xA0	; 160
 648:	80 bd       	out	0x20, r24	; 32
		break;
 64a:	03 c0       	rjmp	.+6      	; 0x652 <USART_Init+0x10e>
		case oddParityEnabled:
		UCSRC |= (1<<URSEL) | (1<<UPM1) | (1<<UPM0);
 64c:	80 b5       	in	r24, 0x20	; 32
 64e:	80 6b       	ori	r24, 0xB0	; 176
 650:	80 bd       	out	0x20, r24	; 32
		break;
	}
	
	switch (usart_config -> polarity)
 652:	86 81       	ldd	r24, Z+6	; 0x06
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	19 f4       	brne	.+6      	; 0x65e <USART_Init+0x11a>
	{
		case transmitRising:
		break;
		case transmitFalling:
		UCSRC |= (1<<URSEL) | (1<<UCPOL);
 658:	80 b5       	in	r24, 0x20	; 32
 65a:	81 68       	ori	r24, 0x81	; 129
 65c:	80 bd       	out	0x20, r24	; 32
 65e:	08 95       	ret

00000660 <USART_send_char>:
}



void USART_send_char(Uint8 data){
	while(!(UCSRA & (1<<UDRE)));
 660:	5d 9b       	sbis	0x0b, 5	; 11
 662:	fe cf       	rjmp	.-4      	; 0x660 <USART_send_char>
	UDR=data; 
 664:	8c b9       	out	0x0c, r24	; 12
	while(!(UCSRA & (1<<TXC)));
 666:	5e 9b       	sbis	0x0b, 6	; 11
 668:	fe cf       	rjmp	.-4      	; 0x666 <USART_send_char+0x6>
}
 66a:	08 95       	ret

0000066c <USART_Tx_msg>:

void USART_Tx_msg(ptr msg){
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	ec 01       	movw	r28, r24
	
	while(*msg != '\0'){
 672:	03 c0       	rjmp	.+6      	; 0x67a <USART_Tx_msg+0xe>
		USART_send_char(*msg);
 674:	0e 94 30 03 	call	0x660	; 0x660 <USART_send_char>
		msg++;
 678:	21 96       	adiw	r28, 0x01	; 1
	while(!(UCSRA & (1<<TXC)));
}

void USART_Tx_msg(ptr msg){
	
	while(*msg != '\0'){
 67a:	88 81       	ld	r24, Y
 67c:	81 11       	cpse	r24, r1
 67e:	fa cf       	rjmp	.-12     	; 0x674 <USART_Tx_msg+0x8>
		USART_send_char(*msg);
		msg++;
	}
	USART_send_char('\0');
 680:	0e 94 30 03 	call	0x660	; 0x660 <USART_send_char>
}
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	08 95       	ret

0000068a <_exit>:
 68a:	f8 94       	cli

0000068c <__stop_program>:
 68c:	ff cf       	rjmp	.-2      	; 0x68c <__stop_program>
